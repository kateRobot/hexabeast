TL;DR: Do not build. Go to Debug->Run ProcessManagement.exe

This first commit includes four modules: Arduino, 3D_Camera, ProcessManagement and Plotting. These are all interconnected by a 'Shared Memory', which you can consider as an inter-process storage of variables. Arduino, Plotting and ProcessManagement have been compiled as 32bit and 3D_Camera as 64bit. Building the projects is not necessary but if you wish to, you may need to move some files around.

The arduino board has been uploaded with a sketch that outputs the readings from Analog Input pins 0, 1 and 2 line by line through serial. The program reads in these lines, breaks them down into three seperate numbers and stores them into the array pins. There is also a variable that records the instance per line. These are then stored into shared memory. For convenience, these are printed into the process terminal.

The depthsense module has been configured to run off the x64 bit version of the DepthSense software. The 32bit version didn't work for me. For this reason only this project was compiled as x64bit. When this project gets built, you will need to move the 3D_camera.exe from x64/Debug/ into /Debug. You will also need to link this module with the include and library folders in depthsense's program files (right click properties on the project -> (C/C++ -> General -> Additional Include Directories)/(Linker -> Linker -> Additional Library Directories). 
The depth information is retrieved from depthMap which is a 1D array. The first row are indices 0-319, second row 320-639, etc. This has been converted into a 2D array where the indices are the x,y coordinates. Then this has been downsized from a 320x240 array into a 160x120 array. Again this is stored into shared memory. The frame number is also stored, and this is printed out in the process terminal.

Plotting is not integral to this solution. It uses matlab and is only confirmed to be working with 2015b 32bit at the moment. A whole bunch of dlls, libs and header files were also needed but removed to minimise the solution size. These files will need to be copied from matlab's program files folder. Additionally you will need to link this module with the include and library folders in matlab's program files similarly to depthsense. This was merely implemented to verify the data from depthsense was correct but the code used can be transferred for use in matlab scripts. Since it isn't necessary it is disabled from running when starting up the processes.

ProcessManagement simply manages each process (Arduino, Camera, Plotting). It starts them up and maintains the shared memory. Since plotting isn't integral to this solution, it was removed from starting up but if you wish to have it running, in the cpp file change line 33 to 3, and remove the comment marks from lines 87 and 88. To have everything running simply run its executable. 

Suggestion for implementing server/client feature: Create a new project within the project. Have it retrieve variables from the shared memory and send to socket upon request.

Anything else will be done on matlab on a remote computer. It will read from the client which will request data from the socket mentioned above. The things done on matlab will not require any shared memory or c++ code, just a lengthy and robust matlab script. I believe part 2 (camera), part 3 (OOI + camera), part 4 (arduino) and part 5 (IMU) will require this.